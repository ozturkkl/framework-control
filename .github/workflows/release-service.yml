name: Build and Release Service MSI

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  build-msi:
    runs-on: windows-latest
    defaults:
      run:
        working-directory: service
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version change
        id: version_check
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $sha = $env:GITHUB_SHA
          $parentSha = $(git rev-parse "$sha^" 2>$null)
          $fileChanged = $false
          if ($parentSha) {
            # Working directory is 'service', so use path relative to this dir
            $diff = git diff --name-only "$parentSha" "$sha" -- Cargo.toml 2>$null
            $fileChanged = [bool]$diff
          }
          $shouldRelease = $false
          $current = $null
          $previous = $null
          if ($fileChanged) {
            $currentMatch = Select-String -Path Cargo.toml -Pattern '^version\s*=\s*"([^"]+)"' | Select-Object -First 1
            if (-not $currentMatch) { throw "Version not found in Cargo.toml" }
            $current = $currentMatch.Matches[0].Groups[1].Value
            $prevContent = git show "$parentSha":service/Cargo.toml 2>$null
            if ($prevContent) {
              $prevMatch = [regex]::Match($prevContent, '^version\s*=\s*"([^"]+)"', 'Multiline')
              if ($prevMatch.Success) { $previous = $prevMatch.Groups[1].Value }
            }
            $shouldRelease = ($current -ne $previous)
          } else {
            $shouldRelease = $false
          }
          echo "VERSION=$current" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "SHOULD_RELEASE=$shouldRelease" | Out-File -FilePath $env:GITHUB_ENV -Append
          Write-Host "Commit: $sha"
          Write-Host "Parent: $parentSha"
          Write-Host "Cargo.toml changed in commit: $fileChanged"
          if ($fileChanged) { Write-Host "Changed files:`n$diff" }
          Write-Host "Detected version: $current"
          Write-Host "Previous version: $previous"
          Write-Host "Should release: $shouldRelease"

      - name: Install Rust (stable)
        if: env.SHOULD_RELEASE == 'True' || env.SHOULD_RELEASE == 'true'
        uses: dtolnay/rust-toolchain@stable

      - name: Install WiX Toolset
        if: env.SHOULD_RELEASE == 'True' || env.SHOULD_RELEASE == 'true'
        run: choco install wixtoolset --no-progress -y

      - name: Install cargo-wix
        if: env.SHOULD_RELEASE == 'True' || env.SHOULD_RELEASE == 'true'
        run: cargo install cargo-wix

      - name: Build service (release)
        if: env.SHOULD_RELEASE == 'True' || env.SHOULD_RELEASE == 'true'
        run: cargo build --release

      - name: Build MSI with cargo-wix
        shell: pwsh
        if: env.SHOULD_RELEASE == 'True' || env.SHOULD_RELEASE == 'true'
        env:
          ALLOWED_ORIGINS: ${{ secrets.ALLOWED_ORIGINS }}
          CONTROL_TOKEN: ${{ secrets.CONTROL_TOKEN }}
        run: |
          $ErrorActionPreference = 'Stop'
          # Substitute placeholders in the WinSW config before packaging
          $xml = Get-Content wix/FrameworkControlService.xml
          $xml = $xml -replace '@ALLOWED_ORIGINS@', "$env:ALLOWED_ORIGINS"
          $xml = $xml -replace '@CONTROL_TOKEN@', "$env:CONTROL_TOKEN"
          Set-Content wix/FrameworkControlService.xml $xml -Encoding UTF8
          cargo wix --nocapture -v

      - name: Locate MSI and read version
        shell: pwsh
        if: env.SHOULD_RELEASE == 'True' || env.SHOULD_RELEASE == 'true'
        run: |
          $ErrorActionPreference = 'Stop'
          $msi = Get-ChildItem -Path "target/wix" -Filter *.msi | Sort-Object LastWriteTime -Descending | Select-Object -First 1
          if (-not $msi) { throw "MSI not found in target/wix" }
          echo "MSI_PATH=$($msi.FullName)" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "STABLE_NAME=framework-control-service-x86_64.msi" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Create stable-named copy for upload
        shell: pwsh
        if: env.SHOULD_RELEASE == 'True' || env.SHOULD_RELEASE == 'true'
        run: |
          $ErrorActionPreference = 'Stop'
          $stable = Join-Path $env:RUNNER_TEMP $env:STABLE_NAME
          Copy-Item -Path "$env:MSI_PATH" -Destination "$stable" -Force
          echo "STABLE_PATH=$stable" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Generate SHA256
        shell: pwsh
        if: env.SHOULD_RELEASE == 'True' || env.SHOULD_RELEASE == 'true'
        run: |
          $ErrorActionPreference = 'Stop'
          $hash = (Get-FileHash "$env:MSI_PATH" -Algorithm SHA256).Hash
          $shaPath = "$env:RUNNER_TEMP/" + $env:STABLE_NAME + ".sha256"
          Set-Content -Path $shaPath -Value $hash -NoNewline
          echo "SHA_PATH=$shaPath" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Ensure gh CLI
        if: env.SHOULD_RELEASE == 'True' || env.SHOULD_RELEASE == 'true'
        run: gh --version
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish versioned release for bumped version
        if: env.SHOULD_RELEASE == 'True' || env.SHOULD_RELEASE == 'true'
        shell: pwsh
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $ErrorActionPreference = 'Stop'
          $tag = "$env:VERSION"
          $commitSha = "$env:GITHUB_SHA"
          $commitMsg = git log -1 --pretty=format:%s "$commitSha"
          $repo = "${{ github.repository }}"
          $commitUrl = "https://github.com/$repo/commit/$commitSha"
          $body = "Automated release for version $env:VERSION`n`nCommit: $commitSha`n$commitUrl`nMessage: $commitMsg"
          gh release view $tag 2>$null
          if ($LASTEXITCODE -ne 0) {
            gh release create $tag -t "$env:VERSION" -n "$body" --latest
          } else {
            gh release edit $tag -t "$env:VERSION" -n "$body" --latest
          }
          gh release upload $tag "$env:STABLE_PATH" --clobber
          gh release upload $tag "$env:SHA_PATH" --clobber


